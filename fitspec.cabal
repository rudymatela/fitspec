name:                fitspec
version:             0.2.0
synopsis:            refining property sets for testing Haskell programs
description:
  FitSpec provides automated assistance in the task of refining test properties
  for Haskell functions.
  .
  FitSpec tests mutant variations of functions under test against a given
  property set, recording any surviving mutants that pass all tests. FitSpec
  then reports:
  .
  * *surviving mutants:* indicating incompleteness of properties,
    prompting the user to amend a property or to add a new one;
  .
  * *conjectures:* indicating redundancy in the property set,
    prompting the user to remove properties so to reduce the cost of testing.

homepage:            https://github.com/rudymatela/fitspec#readme
license:             BSD3
license-file:        LICENSE
author:              Rudy Matela,  Colin Runciman
maintainer:          Rudy Matela <rudy@matela.com.br>
category:            Testing
build-type:          Simple
cabal-version:       >=1.10

extra-source-files:  README.md CREDITS.md

source-repository head
  type:            git
  location:        https://github.com/rudymatela/fitspec

source-repository this
  type:            git
  location:        https://github.com/rudymatela/fitspec
  tag:             v0.2.0


library
  exposed-modules: FitSpec
                 , FitSpec.Engine
                 , FitSpec.Report
                 , FitSpec.Mutable
                 , FitSpec.Mutable.Tuples
                 , FitSpec.ShowMutable
                 , FitSpec.ShowMutable.Tuples
                 , FitSpec.Derive
                 , FitSpec.Main
                 , FitSpec.Most
                 , FitSpec.TestTypes
  other-modules: FitSpec.Utils
               , FitSpec.PrettyPrint
               , FitSpec.Dot
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    .
  default-language:  Haskell2010


test-suite mutate
  type:                exitcode-stdio-1.0
  main-is:             test-mutate.hs
  hs-source-dirs:      ., tests
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  default-language:    Haskell2010

test-suite showmutable
  type:                exitcode-stdio-1.0
  main-is:             test-showmutable.hs
  hs-source-dirs:      ., tests
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  default-language:    Haskell2010

test-suite derive
  type:                exitcode-stdio-1.0
  main-is:             test-derive.hs
  hs-source-dirs:      ., tests
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  default-language:    Haskell2010


benchmark avltrees
  main-is:           avltrees.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark bools
  main-is:           bools.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark digraphs
  main-is:           digraphs.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark heaps
  main-is:           heaps.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark id
  main-is:           id.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark list
  main-is:           list.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark mergeheaps
  main-is:           mergeheaps.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark pretty
  main-is:           pretty.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell, pretty
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark sets
  main-is:           sets.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark setsofsets
  main-is:           setsofsets.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark sieve
  main-is:           sieve.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark sorting
  main-is:           sorting.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0

benchmark spring
  main-is:           spring.hs
  build-depends: base >= 4 && < 5, leancheck, cmdargs, template-haskell
  hs-source-dirs:    ., bench
  default-language:  Haskell2010
  type:              exitcode-stdio-1.0
